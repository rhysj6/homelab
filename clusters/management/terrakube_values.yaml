## Global Name
name: "terrakube"

security:
  useOpenLDAP: false
  dexClientId: "terrakube"

## Dex
dex:
  enabled: true
  config:
    connectors:
    - type: oidc
      id: TerrakubeClient
      name: TerrakubeClient
      config:
        clientID: "terrakube"
        insecureEnableGroups: true
        userNameKey: email
        scopes:
          - openid
          - profile
          - email
    staticClients:
    - id: terrakube
      name: terrakube
      public: true
      redirectURIs:
      - https://api.tf.domain.com/dex # Overwritten by terraform
      - https://tf.domain.com # Overwritten by terraform

## Terraform Storage
storage:
  defaultStorage: false
  minio:
    accessKey: "" # Overwritten by terraform
    secretKey: "" # Overwritten by terraform
    bucketName: "" # Overwritten by terraform
    endpoint: "" # Overwritten by terraform

# Default Database Postgresql
postgresql:
  auth:
    username: "terrakube"
    password: "terrakubepassword" # Overwritten by terraform
    database: "terrakube"

# Default Redis Configuration
redis:
  architecture: "standalone"
  auth:
    enabled: true
    password: "7p9iWVeRV4S944" # Overwritten by terraform

## Ingress properties
ingress:
  useTls: true
  includeTlsHosts: true
  ui:
    domain: "terrakube-ui.minikube.net"
    ingressClassName: "traefik"
    tlsSecretName: tls-secret-ui-terrakube
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-production
  api:
    domain: "terrakube-api.minikube.net"
    ingressClassName: "traefik"
    tlsSecretName: tls-secret-api-terrakube
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-production
  registry:
    domain: "terrakube-reg.minikube.net"
    ingressClassName: "traefik"
    tlsSecretName: tls-secret-reg-terrakube
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-production
  dex:
    path: "/dex/"
    pathType: "Prefix"
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-production
