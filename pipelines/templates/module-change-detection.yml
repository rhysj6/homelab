parameters:
  - name: moduleName
    type: string
  - name: modulePath
    type: string
  - name: notify
    type: boolean
    default: true
  - name: env
    type: object
    default: {}
  - name: kubeConfigSecureFile
    type: string
    default: '' # Optional, used for pipelines that require a local kubeconfig rather than using rancher

jobs:
- job: checkModuleChange
  displayName: 'Check Terraform Module Change: ${{ parameters.moduleName }}'
  pool:
    name: 'Self hosted'
  steps:
    - ${{ if ne(parameters.kubeConfigSecureFile, '') }}:
      - task: DownloadSecureFile@1
        name: kubeConfig
        displayName: 'Download kubeconfig'
        inputs:
          secureFile: ${{ parameters.kubeConfigSecureFile }}
    - script: |
        set -e
        terraform init
      displayName: 'Terraform Init'
      workingDirectory: ${{ parameters.modulePath }}
      env:
        AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
    - script: |
        terraform plan -input=false -detailed-exitcode || EXIT_CODE=$?
        if [ -z "$EXIT_CODE" ]; then EXIT_CODE=0; fi
        if [ "$EXIT_CODE" -eq 1 ]; then
          echo "Terraform plan failed with error code 1. Failing the pipeline."
          exit 1
        fi
        echo "##vso[task.setvariable variable=TF_PLAN_EXIT_CODE]$EXIT_CODE"
      displayName: 'Terraform Plan'
      workingDirectory: ${{ parameters.modulePath }}
      env:
        AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
        AUTHENTIK_TOKEN: $(AUTHENTIK_TOKEN)
        MINIO_PASSWORD: $(MINIO_PASSWORD)
        CLOUDFLARE_API_TOKEN: $(CLOUDFLARE_API_TOKEN)
        RANCHER_TOKEN_KEY: $(RANCHER_TOKEN_KEY)
        TF_VAR_domain: $(TF_VAR_domain)
        TF_VAR_secondary_domain: $(TF_VAR_secondary_domain)
        TF_VAR_windows_domain: $(TF_VAR_windows_domain)
        TF_VAR_cloudflare_email: $(TF_VAR_cloudflare_email)
        TF_VAR_cloudflare_api_key: $(TF_VAR_cloudflare_api_key)
        ${{ if ne(parameters.kubeConfigSecureFile, '') }}:
          KUBE_CONFIG_PATH: '$(kubeConfig.secureFilePath)'
        ${{ each env in parameters.env }}: # Include additional environment variables
          ${{ insert }}: 
            ${{ env.key }}: ${{ env.value }}
