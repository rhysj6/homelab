parameters:
  - name: moduleName
    type: string
  - name: modulePath
    type: string
  - name: environment
    type: string

variables:
  - group: terraform

stages:
  - stage: TerraformInitAndPlan
    pool:
      name: 'Self hosted'
    displayName: 'Terraform Init and Plan'
    jobs:
      - job: TerraformInitAndPlan
        displayName: 'Terraform Init and Plan'
        steps:
          - script: |
              set -e
              terraform init
            displayName: 'Terraform Init'
            workingDirectory: ${{ parameters.modulePath }}
            env:
              AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
          - script: |
              terraform plan -input=false -refresh=false -detailed-exitcode -out tfplan || EXIT_CODE=$?
              if [ -z "$EXIT_CODE" ]; then EXIT_CODE=0; fi
              if [ "$EXIT_CODE" -eq 1 ]; then
                echo "Terraform plan failed with error code 1. Failing the pipeline."
                exit 1
              fi
              echo "##vso[task.setvariable variable=TF_PLAN_EXIT_CODE]$EXIT_CODE"
            displayName: 'Terraform Plan (no refresh)'
            workingDirectory: ${{ parameters.modulePath }}
            env:
              AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
              AUTHENTIK_TOKEN: $(AUTHENTIK_TOKEN)
              MINIO_PASSWORD: $(MINIO_PASSWORD)
              CLOUDFLARE_API_TOKEN: $(CLOUDFLARE_API_TOKEN)
              RANCHER_TOKEN_KEY: $(RANCHER_TOKEN_KEY)
              TF_VAR_domain: $(TF_VAR_domain)
              TF_VAR_secondary_domain: $(TF_VAR_secondary_domain)
              TF_VAR_windows_domain: $(TF_VAR_windows_domain)
              TF_VAR_cloudflare_email: $(TF_VAR_cloudflare_email)
              TF_VAR_cloudflare_api_key: $(TF_VAR_cloudflare_api_key)
          - ${{ if eq(variables['TF_PLAN_EXIT_CODE'], '2') }}:
            - task: ManualValidation@1
              timeoutInMinutes: 1440 # 1 Day
              inputs:
                notifyUsers: '$(System.TeamProject)/DeploymentApprovers'

            - script: |
                terraform apply -input=false tfplan
              displayName: 'Terraform Apply'
              workingDirectory: ${{ parameters.modulePath }}
              env:
                AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
                AUTHENTIK_TOKEN: $(AUTHENTIK_TOKEN)
                MINIO_PASSWORD: $(MINIO_PASSWORD)
                CLOUDFLARE_API_TOKEN: $(CLOUDFLARE_API_TOKEN)
                RANCHER_TOKEN_KEY: $(RANCHER_TOKEN_KEY)
                TF_VAR_domain: $(TF_VAR_domain)
                TF_VAR_secondary_domain: $(TF_VAR_secondary_domain)
                TF_VAR_windows_domain: $(TF_VAR_windows_domain)
                TF_VAR_cloudflare_email: $(TF_VAR_cloudflare_email)
                TF_VAR_cloudflare_api_key: $(TF_VAR_cloudflare_api_key)