parameters:
  - name: moduleName
    type: string
  - name: modulePath
    type: string
  - name: environment
    type: string

variables:
  - group: terraform

stages:
  - stage: InitAndPlan
    pool:
      name: 'Self hosted'
    displayName: 'Terraform Init and Plan'
    jobs:
      - job: InitAndPlan
        displayName: 'Terraform Init and Plan'
        steps:
          - script: |
              set -e
              terraform init
            displayName: 'Terraform Init'
            name: Init
            workingDirectory: ${{ parameters.modulePath }}
            env:
              AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
          - script: |
              terraform plan -input=false -detailed-exitcode -out tfplan || EXIT_CODE=$?
              if [ -z "$EXIT_CODE" ]; then EXIT_CODE=0; fi
              if [ "$EXIT_CODE" -eq 1 ]; then
                echo "Terraform plan failed with error code 1. Failing the pipeline."
                exit 1
              fi
              echo "##vso[task.setvariable variable=exitCode;isOutput=true;]$EXIT_CODE"
            displayName: 'Terraform Plan'
            name: plan
            workingDirectory: ${{ parameters.modulePath }}
            env:
              AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
              AUTHENTIK_TOKEN: $(AUTHENTIK_TOKEN)
              MINIO_PASSWORD: $(MINIO_PASSWORD)
              CLOUDFLARE_API_TOKEN: $(CLOUDFLARE_API_TOKEN)
              RANCHER_TOKEN_KEY: $(RANCHER_TOKEN_KEY)
              TF_VAR_domain: $(TF_VAR_domain)
              TF_VAR_secondary_domain: $(TF_VAR_secondary_domain)
              TF_VAR_windows_domain: $(TF_VAR_windows_domain)
              TF_VAR_cloudflare_email: $(TF_VAR_cloudflare_email)
              TF_VAR_cloudflare_api_key: $(TF_VAR_cloudflare_api_key)

          - task: CopyFiles@2
            displayName: 'Copy Terraform Plan and files'
            condition: eq(variables['plan.exitCode'], 2)
            inputs:
              SourceFolder: ${{ parameters.modulePath }}
              Contents: tfplan
              TargetFolder: '$(Build.ArtifactStagingDirectory)'
          - publish: '$(Build.ArtifactStagingDirectory)'
            displayName: 'Publish Terraform Plan'
            condition: eq(variables['plan.exitCode'], 2)
            artifact: plan

  - stage: TerraformApply
    displayName: 'Terraform Apply'
    dependsOn: InitAndPlan
    condition: eq(dependencies.InitAndPlan.outputs['InitAndPlan.plan.exitCode'], 2)
    jobs:
      - job: waitForValidation
        displayName: Wait for external validation
        pool: server
        steps:
          - task: ManualValidation@1
            timeoutInMinutes: 1440 # 1 Day
            inputs:
              notifyUsers: '$(System.TeamProject)/DeploymentApprovers'
      - job: TerraformApply
        displayName: 'Terraform Apply'
        dependsOn: waitForValidation
        pool:
          name: 'Self hosted'
        workspace:
          clean: all
        steps:
          - download: current
            artifact: plan
          - task: CopyFiles@2
            displayName: 'Copy Terraform Plan'
            inputs:
              SourceFolder: '$(Pipeline.Workspace)/plan'
              TargetFolder: '${{ parameters.modulePath }}'
          - script: |
              terraform init -input=false
            displayName: 'Terraform Init'
            workingDirectory: '${{ parameters.modulePath }}'
            env:
              AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
          - script: |
              terraform apply -input=false tfplan
            displayName: 'Terraform Apply'
            workingDirectory: '${{ parameters.modulePath }}'
            env:
              AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
              AUTHENTIK_TOKEN: $(AUTHENTIK_TOKEN)
              MINIO_PASSWORD: $(MINIO_PASSWORD)
              CLOUDFLARE_API_TOKEN: $(CLOUDFLARE_API_TOKEN)
              RANCHER_TOKEN_KEY: $(RANCHER_TOKEN_KEY)
              TF_VAR_domain: $(TF_VAR_domain)
              TF_VAR_secondary_domain: $(TF_VAR_secondary_domain)
              TF_VAR_windows_domain: $(TF_VAR_windows_domain)
              TF_VAR_cloudflare_email: $(TF_VAR_cloudflare_email)
              TF_VAR_cloudflare_api_key: $(TF_VAR_cloudflare_api_key)